{load_file("stdrun.hoc")}
{load_file("import3d.hoc")}

begintemplate PassiveDendsSimpleSomaModel
  public init, morphology, geom_nseg_fixed, geom_nsec, gid
  public channel_seed, channel_seed_set
  public soma, dend, apic, axon
  //public myelin
  create soma[1], dend[1], apic[1], axon[1]
  //create myelin[1]

  objref this, CellRef, segCounts

  public all, somatic, apical, axonal, basal, APC
  //public myelinated
  objref all, somatic, apical, axonal, basal, APC
  //objref myelinated

proc init(/* args: morphology_dir, morphology_name */) {
  all = new SectionList()
  apical = new SectionList()
  axonal = new SectionList()
  basal = new SectionList()
  somatic = new SectionList()
  //myelinated = new SectionList()

  //gid in this case is only used for rng seeding
  gid = 0

  //For compatibility with BBP CCells
  CellRef = this

  forall delete_section()

  load_morphology($s1, $s2)

  geom_nseg($3)

  replace_axon()

  insertChannel()

  biophys()

  // Initialize channel_seed_set to avoid accidents
  channel_seed_set = 0
  // Initialize random number generators
  re_init_rng()
}

proc load_morphology(/* morphology_dir, morphology_name */) {localobj morph, import, sf, extension
  strdef morph_path
  sprint(morph_path, "%s/%s", $s1, $s2)

  sf = new StringFunctions()
  extension = new String()

  sscanf(morph_path, "%s", extension.s)
  sf.right(extension.s, sf.len(extension.s)-4)

  if( strcmp(extension.s, ".asc") == 0 ) {
    morph = new Import3d_Neurolucida3()
  } else if( strcmp(extension.s, ".swc" ) == 0) {
    morph = new Import3d_SWC_read()
  } else {
    printf("Unsupported file format: Morphology file has to end with .asc or .swc" )
    quit()
  }

  morph.quiet = 1
  morph.input(morph_path)

  import = new Import3d_GUI(morph, 0)
  import.instantiate(this)
}

/*
 * Assignment of mechanism values based on distance from the soma
 * Matches the BluePyOpt method
 */
proc distribute_distance(){local x localobj sl
  strdef stmp, distfunc, mech

  sl = $o1
  mech = $s2
  distfunc = $s3
  this.soma[0] distance(0, 0.5)
  sprint(distfunc, "%%s %s(%%f) = %s", mech, distfunc)
  forsec sl for(x, 0) {
    sprint(stmp, distfunc, secname(), x, distance(x))
    execute(stmp)
  }
}

proc geom_nseg() {
  this.geom_nsec() //To count all sections
  //TODO: geom_nseg_fixed depends on segCounts which is calculated by
  //  geom_nsec.  Can this be collapsed?
  this.geom_nseg_fixed($1)
  this.geom_nsec() //To count all sections
}

proc insertChannel() {
  //forsec this.all {
  //  insert pas
  //}
  forsec this.axonal {
    insert pas
    
    insert kv
    insert na
  }
  forsec this.somatic {
    insert pas
    
    insert kv
    insert na
  }
  
  forsec this.apical {
    insert pas
  }

  forsec this.basal {
    insert pas
  }
  
  //forsec this.myelinated {
  // insert pas
  //}
}

proc biophys() {
  forsec CellRef.all {
    Ra = 150
  }
  
  forsec CellRef.axonal {
    cm = 1

    e_pas = -70
    g_pas = 1.0/20000

    ena = 50
    gbar_kv = 2000 // fitted for rheobase of Rat_L5b_PC_2_Hay
    
    ek = -90
    gbar_na = 8300 // fitted for rheobase of Rat_L5b_PC_2_Hay
  }  
  
  forsec CellRef.somatic {
    cm = 1
    
    e_pas = -70
    g_pas = 1.0/20000
    
    ek = -90
    gbar_kv = 0.1 * 2000 // fitted for rheobase of Rat_L5b_PC_2_Hay
    
    ena = 50
    gbar_na = 0.1 * 8300 // fitted for rheobase of Rat_L5b_PC_2_Hay
  }

  forsec CellRef.apical {
    cm = 2

    e_pas = -70
    g_pas = 2.0/20000
  }

  forsec CellRef.basal {
    cm = 2

    e_pas = -70
    g_pas = 2.0/20000
  }
  
  //forsec CellRef.myelinated {
  //  cm = 0.090910000000000005
  //  g_pas = 3.0272699999999998e-06
  //}
}

func sec_count(/* SectionList */) { local nSec
  nSec = 0
  forsec $o1 {
      nSec += 1
  }
  return nSec
}

/*
 * Iterate over the section and compute how many segments should be allocate to
 * each.
 */
proc geom_nseg_fixed(/* chunkSize */) { local secIndex, chunkSize
  chunkSize = $1
  soma area(.5) // make sure diam reflects 3d points
  secIndex = 0
  forsec all {
    nseg = 1 + 2*int(L/chunkSize)
    segCounts.x[secIndex] = nseg
    secIndex += 1
  }
}

/*
 * Count up the number of sections
 */
proc geom_nsec() { local nSec
  nSecAll = sec_count(all)
  nSecSoma = sec_count(somatic)
  nSecApical = sec_count(apical)
  nSecBasal = sec_count(basal)
  //nSecMyelinated = sec_count(myelinated)
  nSecAxonalOrig = nSecAxonal = sec_count(axonal)

  segCounts = new Vector()
  segCounts.resize(nSecAll)
  nSec = 0
  forsec all {
    segCounts.x[nSec] = nseg
    nSec += 1
  }
}

/*
 * Replace the axon built from the original morphology file with a stub axon
 */
    

    proc replace_axon(){local count, L_target, diam_target

        L_target = 45  // length of stub axon
        nseg0 = 5  // number of segments for each of the two axon sections
        diam_target = 1.0  // diameter of the axon

        nseg_total = nseg0 * 2

        // get rid of the old axon
        forsec axonal{delete_section()}
        execute1("create axon[2]", CellRef)

        count = 0

        // new axon diameter, length, and number of segments
        for i=0,1{
            access axon[i]
            L =  L_target/2
            nseg = nseg_total/2

            for (x) {
                if (x > 0 && x < 1) {
                    diam(x) = diam_target 
                    count = count + 1
                }
            }
            all.append()
            axonal.append()
        }

        nSecAxonal = 2
        soma[0] connect axon[0](0), 1
        axon[0] connect axon[1](0), 1

        //create myelin[1]
        //access myelin{
        //    L = 1000
        //    diam = diam_target
        //    nseg = 5
        //    all.append()
        //    myelinated.append()
        //}
        //connect myelin(0), axon[1](1)
    }
    



func hash_str() {localobj sf strdef right
  sf = new StringFunctions()

  right = $s1

  n_of_c = sf.len(right)

  hash = 0
  char_int = 0
  for i = 0, n_of_c - 1 {
     sscanf(right, "%c", & char_int)
     hash = (hash * 31 + char_int) % (2 ^ 31 - 1)
     sf.right(right, 1)
  }

  return hash
}

proc re_init_rng() {localobj sf
    strdef full_str, name

    sf = new StringFunctions()

    if(numarg() == 1) {
        // We received a third seed
        channel_seed = $1
        channel_seed_set = 1
    } else {
        channel_seed_set = 0
    }


}


endtemplate PassiveDendsSimpleSomaModel